# -*- coding: utf-8 -*-
"""push_data_to_gsheet

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m200bDQzQjE3dKmHXTLljEFqp_7bPHhU
"""

# date = '3/1/23'
# link = 'https://docs.google.com/spreadsheets/d/15O2XvhIdSmG45an6Gj6spynLvzBMm3UI63eDutyKPjg/edit#gid=0'

"""# Code"""

sh = "day"

import gspread
from google.oauth2.credentials import Credentials
from google.colab import auth, drive
from google.auth import default
from gspread_dataframe import get_as_dataframe, set_with_dataframe
import pandas as pd
auth.authenticate_user()
import time
drive.mount('/content/drive', force_remount=True)
import numpy as np

def update_cells_with_retry(sheet, cell_list,max_retries=100, initial_backoff=1.0):
    backoff = initial_backoff
    num_retries = 0
    while True:
        try:
            sheet.update_cells(cell_list)
            break
        except Exception as e:
            if num_retries >= max_retries:
                raise e
            print(f"Update failed with error: {str(e)}")
            print(f"Retrying in {backoff:.2f} seconds...")
            time.sleep(backoff)
            backoff *= 2
            num_retries += 1

def read_file():
  creds, _ = default()
  gc = gspread.authorize(creds)
  regions = ['HN', 'HCM', 'SOUTH']
  list_link = ['https://docs.google.com/spreadsheets/d/1kCbJnUa9VAW22Q5KInLeGZyPE2rA7PLx-ED3RW1wk1c/edit#gid=921020745',
              'https://docs.google.com/spreadsheets/d/14Wt1R7arlgAtnzL9Xa3T-jkN5xqIHR-ow8YSvramhK8/edit#gid=921020745',
              'https://docs.google.com/spreadsheets/d/15B4yR87vG3ft5ClRNgN83CbDxaRBCqDSCDYDxjNrSD8/edit#gid=921020745',
              'https://docs.google.com/spreadsheets/d/1UcFGsgMGLfPOXouWKz1KBvMu53pjztYFwjd6zpzvVhQ/edit#gid=921020745']
  dfs = []
  for link in list_link:
    for region in regions:
      sheet = gc.open_by_url(link).worksheet(region)
      dfs.append(get_as_dataframe(sheet,evaluate_formulas=True, header=1))
  lst_sheet = ['NVR-FS-HN', 'NVR-FS-HCM', 'NVR-FS-SOUTH', 'Opv2-FS-HN', 'Opv2-FS-HCM', 'Opv2-FS-SOUTH',
             'NVR-Retail-HN', 'NVR-Retail-HCM', 'NVR-Retail-SOUTH', 'Opv2-Retail-HN', 'Opv2-Retail-HCM', 'Opv2-Retail-SOUTH']
  for i in range(12):
    dfs[i]['file'] = lst_sheet[i]  
    dfs[i] = dfs[i].loc[~dfs[i]['Mã đơn'].isna()].iloc[1:, :]
    dfs[i] = dfs[i][['Ngày input',	'Mã đơn',	'Shipper Weight',	'NJV Weight',	'NJV Height',	'NJV Length',
                    'NJV Width',	'Bằng chứng',	'Xác nhận bằng chứng', 'Lý do bằng chứng không đạt chuẩn',	'Xác nhận bằng chứng.1',	
                    'Lý do bằng chứng đạt chuẩn',	'Height trên hình',	'Length trên hình',	'Width trên hình',	'Weight trên hình by QA (thập phân là dấu chấm)',	'QA']]
    dfs[i] = dfs[i].rename(columns={'Xác nhận bằng chứng':'Xác nhận bằng chứng SA', 'Xác nhận bằng chứng.1':'Xác nhận bằng chứng (QA)'})
    dfs[i] = dfs[i][dfs[i]['Ngày input']==date]
    dfs[i] = dfs[i][dfs[i]['Xác nhận bằng chứng SA']=='Không đạt']
    dfs[i]['QA input time'] = ''
  return dfs

def push_data(link):
  # columns = pd.concat(dfs).columns.tolist()
  dfs = read_file()
  data = pd.concat(dfs).fillna("-").values.tolist()
  df = pd.concat(dfs)
  df = df.fillna('-')
  creds, _ = default()
  gc = gspread.authorize(creds)
  sheet = gc.open_by_url(link).worksheet(sh)
  # sheet.clear()
  cell_list = sheet.range(f'A1:{gspread.utils.rowcol_to_a1(df.shape[0], df.shape[1])}')

  columns = df.columns.tolist()
  data = np.vstack([columns,data]).tolist()
  cell_list = sheet.range(f'A1:{gspread.utils.rowcol_to_a1(df.shape[0], df.shape[1])}')
  for i, cell in enumerate(cell_list):
      cell.value = data[i // df.shape[1]][i % df.shape[1]]

  # Call the update_cells_with_retry function to update the cells
  update_cells_with_retry(sheet, cell_list)

push_data(link)

